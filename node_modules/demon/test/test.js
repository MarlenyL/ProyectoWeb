'use strict'

let cp = require('child_process')
,   fs = require('fs')

,   assert = require('chai').assert

,   demon = require('../index')

,   example = 'js/example.js'

,   expect = require('livitytest').expect

describe('demon as a cli utility (installed with `npm install -g demon`', () => {
  let pid = 0
  it('should be available as `demon` in the $PATH', (done) => {
    cp.exec('which demon', (err, stdout, stderr) => {
      assert(!err, 'there was no error')
      done()
    })      
  })
  it('should output "beep" if no commands are given', (done) => {
    cp.exec('demon', (err, stdout, stderr) => {
      assert.include(stdout, 'beep', 'outputs "beep" to stdout')
      done()
    })
  })
  describe('demon', () => {
    it('should take a path to a javascript and run the script as a child process)', (done) => {
      cp.exec(`demon ${example}`, (err, stdout, stderr) => {
        assert(!err, 'there was no error')
        done()
      })
    })
    it('should keep track of the child process\'s pid', (done) => {
      fs.readFile(`${process.env.HOME}/.demontmp`, 'utf8', (err, data) => {
        assert(!err, 'there was no error')
        assert.match(data, /\d*/, 'contains a pid')
        done()
      })
    })
  }) 
  describe('demon kill', () => {
    it('should kill all currently tracked processes', (done) => {
      cp.exec('demon kill', (blah) => {
        console.log(blah)
        assert(!err, 'there was no error')
        done()
      })
    })
    it('should delete ~/.demontmp', (done) => {
      fs.readFile(`${process.env.HOME}/.demontmp`, 'utf8', (err, data) => {
        assert.strictEqual(err.code, 'ENOENT', '.demontmp was deleted')
        done()
      })
    })
  })
})
// describe('demon as a node module', () => {
//   let pid = 0
//   it('should contain two methods: kill() and start()', () => {
//     assert.property(demon, 'start', 'has start')
//     assert.property(demon, 'kill', 'has kill')
//   })
//   describe('demon.start()', () => {
//     it('should take a path to a javascript and run the script as a child process)', (done) => {
//       demon.start(example, (err, childProcess) => {
//         assert(!err, 'there was no error')
//         pid = childProcess.pid
//         assert.isNumber(pid, 'pid is a number') 
//         done()
//       }) 
//     })
//     it('should show a process running at the pid returned in the callback', (done) => {
//       expect(process.kill(pid, 0)).tobetrue()
//       done()
//     })
//     it('should keep track of the child process\'s pid', (done) => {
//       fs.readFile(`${process.env.HOME}/.demontmp`, 'utf8', (err, data) => {
//         assert(!err, 'there was no error')
//         assert.include(data, pid, 'contains the pid')
//         done()
//       })
//     })
//   }) 
//   describe('demon.kill()', () => {
//     it('should kill all currently tracked processes', (done) => {
//       demon.kill(err => {
//         console.log('ERR', err)
//         assert.sameMembers(err, [null, null], 'there were no errors')        
//         cp.exec(`ps -p ${pid}`, (err, stdout, stderr) => {
//           assert.ok(err, 'there was no error')
//           assert.notInclude(stdout, pid, 'a lookup of the pid contains nothing')
//           done()
//         })
//       })
//     })
//     it('should delete ~/.demontmp', (done) => {
//       fs.readFile(`${process.env.HOME}/.demontmp`, 'utf8', (err, data) => {
//         assert.strictEqual(err.code, 'ENOENT', '.demontmp was deleted')
//         done()
//       })
//     })
//     it('should return with an error if kill is called but .demontmp doesn\'t exist', (done) => {
//       demon.kill(err => {
//         assert.strictEqual(err.message, 'demon not currently tracking any processes', '.demontmp doesn\'t exist')
//         done()
//       })
//     })
//   })
// })
