'use strict'

import cp from 'child_process'
import fs from 'fs'

import { assert } from 'chai'

import demon from '../index'

describe('demon as a node module', () => {
  it('should contain two methods: kill() and start()', () => {
    assert.property(demon, 'start', 'has start')
    assert.property(demon, 'kill', 'has kill')
  })
  describe('demon.start()', () => {
    let pid = 0
    it('should take a path to a javascript and run the script as a daemon (as a child process)', (done) => {
      demon.start('js/example.js', (err, childProcess) => {
        assert(err === null, 'err should be null')
        assert(!isNaN(parseInt(pid, 10)), 'pid should be a number') 
        pid = childProcess.pid  
        done()
      }) 
    })
    it('should show a process running at the pid returned in the callback', (done) => {
      cp.exec(`ps -p ${pid}`, (err, stdout, stderr) => {
        assert(err === null, 'err should be null')
        assert(RegExp(pid).test(stdout) === true, 'a listing of the pid is informative')
        done()
      })
    })
    it('should keep track of the child process\'s pid', (done) => {
      fs.readFile(`${process.env.HOME}/
  }) 
})
