'use strict'

let cp = require('child_process')
,   fs = require('fs')
,   path = require('path')

,   noop = function () {}

exports.start = (scriptPath, args, options, callback) => {
  var args = args || []
  ,   callback = callback || noop

  if(typeof scriptPath !== 'string') return callback(new Error('scriptPath is undefined'))
  if(typeof args === 'function') {
    callback = args
    args = []
  } else if(typeof options === 'function') {
    callback = options
    options = {}
  }

  let parentScript = module.parent.filename
  ,   cli = /demon[\/\\]bin[\/\\]demon\.js$/.test(parentScript)
  ,   baseDir = cli ? process.cwd() : path.dirname(parentScript)
  ,   _process = cp.fork(path.resolve(baseDir, scriptPath), args, options)

  fs.appendFile(`${process.env.HOME}/.demontmp`, `${_process.pid}\n`, { encoding : 'utf8' }, (err) => callback(err, _process))
}

exports.kill = (callback) => {
  var callback = callback || noop

  fs.readFile(`${process.env.HOME}/.demontmp`, 'utf8', (err, data) => {
    if(err)
      if(err.code === 'ENOENT') return callback(new ReferenceError('demon not currently tracking any processes'))
      else
        return callback(err)
    
    // container to collect multiple errors
    let callbackPayload = []
    data.split('\n').forEach(pid => {
      let outcome = process.kill(pid, 'SIGKILL')
      if (outcome !== true) callbackPayload.push(outcome)
    })

    fs.unlink(`${process.env.HOME}/.demontmp`, (err) => {
      if (err) callbackPayload.push(err)
      callback("BLAH", callbackPayload)
    }) 
  })
}
